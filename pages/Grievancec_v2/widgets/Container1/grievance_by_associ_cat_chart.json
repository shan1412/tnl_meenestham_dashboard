{
  "accentColor": "{{appsmith.theme.colors.primaryColor}}",
  "alignment": "start",
  "allowScroll": false,
  "animateLoading": false,
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "bottomRow": 149.79687500000006,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "chartData": {
    "5zz1dwyawa": {
      "data": [
        {
          "x": "Product1",
          "y": 20000
        },
        {
          "x": "Product2",
          "y": 22000
        },
        {
          "x": "Product3",
          "y": 32000
        }
      ],
      "seriesName": "2023"
    }
  },
  "chartName": "Sales Report",
  "chartType": "CUSTOM_ECHART",
  "customEChartConfig": "{{ ((chartType) => ( (() => {\n\t// Retrieve selected filter values\n\tconst { selectedGrievanceByAssociationCat, chart_color_palette } = utills.getFilters();\n\n\t// Filter the dataset based on selected filters\n\tconst filteredData = utills.filterDataPoints({\n\t\tdata: grievancedataset_tnl.data,\n\t\tfilterTypes: '*',\n\t\texcludeTypes: ['ByAssociationCat', 'TimeLine']\n\t});\n\n\t// Use query binding to get association tags\n\tconst associationTagsData = association_tags_check_tnl.data || [];\n\n\t// Extract association tags to include in the filtering\n\tconst associationTagsSet = new Set(\n\t\tassociationTagsData.map(item => item.Tags ? item.Tags.trim() : '')\n\t);\n\tconsole.log('Association tags:', associationTagsSet);\n\n\t// Aggregate data by association tags and count distinct grievances\n\tconst aggregatedData = filteredData.reduce((acc, req) => {\n\t\tconst uniqueGrievanceKey = req.grievance_key;\n\t\treq.requestor_tags?.forEach(tag => {\n\t\t\tconst trimmedTag = tag.trim();\n\t\t\tif (associationTagsSet.has(trimmedTag)) {\n\t\t\t\tif (!acc[trimmedTag]) {\n\t\t\t\t\tacc[trimmedTag] = new Set();\n\t\t\t\t}\n\t\t\t\tacc[trimmedTag].add(uniqueGrievanceKey);\n\t\t\t}\n\t\t});\n\t\treturn acc;\n\t}, {});\n\n\tconsole.log('Aggregated tags:', aggregatedData);\n\n\t// Convert the aggregated data into an array, count distinct grievances, and sort\n\tconst sortedData = Object.entries(aggregatedData)\n\t.map(([associationTags, grievanceSet]) => ({\n\t\tassociationTags,\n\t\tcount: grievanceSet.size\n\t}))\n\t.filter(item => item.associationTags && item.associationTags !== 'None')\n\t.sort((a, b) => b.count - a.count);\n\n\t// Take the top 5 and aggregate the rest as \"Others\"\n\tconst top5 = sortedData.slice(0, 5);\n\tconst othersCount = sortedData.slice(5).reduce((acc, curr) => acc + curr.count, 0);\n\n\t// Prepare final data\n\tlet finalData = [\n\t\t...top5,\n\t\t...(othersCount > 0 ? [{ associationTags: 'Others', count: othersCount }] : [])\n\t];\n\n\t// Ensure \"Others\" is always the last in the final array\n\tfinalData = finalData.sort((a, b) => {\n\t\tif (a.associationTags === 'Others') return 1;\n\t\tif (b.associationTags === 'Others') return -1;\n\t\treturn b.count - a.count; // Keep the remaining sorted by count\n\t});\n\n\t// Prepare data for the chart\n\tconst data = finalData.map(item => ({\n\t\tassociationTags: item.associationTags,\n\t\tcount: item.count,\n\t\tcolor: selectedGrievanceByAssociationCat === item.associationTags ? chart_color_palette.secondarylight : chart_color_palette.secondarylight // Adjust color if needed\n\t}));\n\n\t// Return chart configuration\n\treturn {\n\t\ttitle: {\n\t\t\ttext: appsmith.URL.queryParams.lng === 'te' ? 'సంఘం వర్గం ఆధారంగా ఫిర్యాదులు' : 'Top 5 Association Categories for Grievances Registered',\n\t\t\tleft: 'center',\n\t\t\ttop: 'top',\n\t\t\ttextStyle: {\n\t\t\t\tfontSize: 18,\n\t\t\t\tfontWeight: 'bold'\n\t\t\t}\n\t\t},\n\t\tgrid: {\n\t\t\tleft: '20%',\n\t\t\tright: '10%',\n\t\t\ttop: '10%',\n\t\t\tbottom: '15%'\n\t\t},\n\t\txAxis: {\n\t\t\ttype: 'value',\n\t\t\tnameTextStyle: {\n\t\t\t\tfontSize: 14,\n\t\t\t\tfontWeight: 'bold'\n\t\t\t}\n\t\t},\n\t\tyAxis: {\n\t\t\ttype: 'category',\n\t\t\tdata: data.map(item => item.associationTags),\n\t\t\taxisLabel: {\n\t\t\t\tformatter: function(value) {\n\t\t\t\t\tconst maxLength = 10;\n\t\t\t\t\tconst words = value.split(' ');\n\t\t\t\t\tlet line = '';\n\t\t\t\t\tlet result = '';\n\n\t\t\t\t\twords.forEach(word => {\n\t\t\t\t\t\tif ((line + word).length > maxLength) {\n\t\t\t\t\t\t\tresult += `${line.trim()}\\n`;\n\t\t\t\t\t\t\tline = word;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tline += (line.length === 0 ? '' : ' ') + word;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tresult += line.trim();\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tseries: [\n\t\t\t{\n\t\t\t\ttype: 'bar',\n\t\t\t\tdata: data.map(item => ({\n\t\t\t\t\tvalue: item.count,\n\t\t\t\t\titemStyle: {\n\t\t\t\t\t\tcolor: item.color,\n\t\t\t\t\t\topacity: selectedGrievanceByAssociationCat && selectedGrievanceByAssociationCat !== item.associationTags ? 0.2 : 1\n\t\t\t\t\t}\n\t\t\t\t})),\n\t\t\t\tlabel: {\n\t\t\t\t\tshow: true,\n\t\t\t\t\tposition: 'right',\n\t\t\t\t\tformatter: '{c}',\n\t\t\t\t\tfontSize: 12\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\ttooltip: {\n\t\t\ttrigger: 'axis',\n\t\t\taxisPointer: {\n\t\t\t\ttype: 'shadow'\n\t\t\t}\n\t\t}\n\t};\n})()\n))(grievance_by_associ_cat_chart.chartType) }}",
  "customFusionChartConfig": {
    "dataSource": {
      "chart": {
        "alignCaptionWithCanvas": 1,
        "canvasPadding": "0",
        "caption": "Sales Report",
        "captionAlignment": "center",
        "captionFontColor": "#231F20",
        "captionFontSize": "24",
        "captionPadding": "20",
        "chartBottomMargin": "10",
        "chartLeftMargin": "20",
        "chartRightMargin": "40",
        "chartTopMargin": "10",
        "labelFontColor": "#716e6e",
        "labelFontSize": "12",
        "legendIconAlpha": "100",
        "legendIconBgAlpha": "100",
        "legendIconSides": "4",
        "legendPosition": "top",
        "theme": "fusion",
        "xAxisName": "Product Line",
        "xAxisNameFontColor": "#716e6e",
        "xAxisNameFontSize": "14",
        "yAxisName": "Revenue($)",
        "yAxisNameFontColor": "#716e6e",
        "yAxisNameFontSize": "14",
        "yAxisValueFontColor": "#716e6e",
        "yAxisValueFontSize": "12"
      },
      "data": [
        {
          "label": "Product1",
          "value": 20000
        },
        {
          "label": "Product2",
          "value": 22000
        },
        {
          "label": "Product3",
          "value": 32000
        }
      ]
    },
    "type": "column2d"
  },
  "displayName": "Chart",
  "dynamicBindingPathList": [
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "accentColor"
    },
    {
      "key": "fontFamily"
    },
    {
      "key": "customEChartConfig"
    }
  ],
  "dynamicTriggerPathList": [
    {
      "key": "onDataPointClick"
    }
  ],
  "flexVerticalAlignment": "start",
  "fontFamily": "{{appsmith.theme.fontFamily.appFont}}",
  "hideCard": false,
  "iconSVG": "/static/media/icon.8eea39845729f7f4bfadeecd3810a09d.svg",
  "isDeprecated": false,
  "isLoading": false,
  "isVisible": true,
  "key": "ed4zix1hrb",
  "labelOrientation": "auto",
  "leftColumn": 32,
  "minWidth": 450,
  "mobileBottomRow": 346.2812499999995,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 64,
  "mobileTopRow": 314.2812499999997,
  "onDataPointClick": "{{grievance_by_associ_cat.myFun1();\ntotal_closed_grivevances__coun.myFun1();\ntotal_open_grievances_count.myFun1();\ntotal_grievances_count.myFun1();\naverage_ticket_time.myFun1();}}",
  "parentColumnSpace": 11.890625,
  "parentId": "zjg87kjyes",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "responsiveBehavior": "fill",
  "rightColumn": 64,
  "searchTags": [
    "graph",
    "visuals",
    "visualisations"
  ],
  "showDataPointLabel": false,
  "tags": [
    "Display"
  ],
  "topRow": 119.79687500000007,
  "type": "CHART_WIDGET",
  "version": 1,
  "widgetId": "rg8zfuoein",
  "widgetName": "grievance_by_associ_cat_chart",
  "widthInPercentage": "0.48585418933623503",
  "xAxisName": "Product Line",
  "yAxisName": "Revenue($)"
}